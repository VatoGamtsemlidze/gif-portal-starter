{"version":3,"sources":["App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","console","log","publicKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","connect","onlyIfTrusted","response","toString","alert","error","sendGif","e","preventDefault","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","connectWallet","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","useEffect","onLoad","addEventListener","removeEventListener","account","fetch","className","onClick","onSubmit","type","placeholder","value","onChange","target","map","gif","src","gifLink","alt","giflink","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gwCAQQA,EAA2BC,IAA3BD,cAGFE,GAH6BD,IAAZE,QAGXC,OAAOC,OAAOC,EAAGC,SAASC,YAChCC,EAAS,IAAIC,WAAWR,GACxBS,EAAcV,IAAKE,QAAQS,cAAcH,GAC/CI,QAAQC,IAAIH,EAAYI,WAExB,IAAMC,EAAY,IAAIC,YAAUC,EAAIC,SAASC,SAGvCC,EAAUC,wBAAc,UAGxBC,EACiB,YA8LRC,EA1LH,WAEV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAGMC,EAAwB,uCAAG,gCAAAC,EAAA,oEAEVC,SAAXC,EAFqB,EAErBA,QAFqB,qBAKvBA,EAAOC,UALgB,gCAOFD,EAAOE,QAAQ,CAAEC,eAAe,IAP9B,OAOnBC,EAPmB,OAgBzBZ,EAAiBY,EAASxB,UAAUyB,YAhBX,+BAmB3BC,MAAM,8DAnBqB,0DAsB7B5B,QAAQ6B,MAAR,MAtB6B,0DAAH,qDAyBxBC,EAAO,uCAAG,WAAOC,GAAP,iBAAAX,EAAA,yDACdW,EAAEC,iBACwB,IAAtBjB,EAAWkB,OAFD,uBAGZjC,QAAQC,IAAI,sBAHA,iCAMdD,QAAQC,IAAI,YAAac,GANX,SAQNmB,EAAWC,IACXC,EAAU,IAAIC,IAAQhC,EAAKF,EAAW+B,GAThC,UAUNE,EAAQE,IAAIC,OAAOxB,EAAY,CACnCyB,SAAU,CACR1C,YAAaA,EAAYI,UACzBuC,KAAMP,EAASQ,OAAOxC,aAbd,eAgBZF,QAAQC,IAAI,mCAAoCc,GAEhDC,EAAc,IAlBF,UAmBN2B,IAnBM,0DAqBZ3C,QAAQC,IAAI,qBAAZ,MArBY,0DAAH,sDAwBbD,QAAQC,IAAIY,GACZb,QAAQC,IAAIgB,GACZ,IAAM2B,EAAa,uCAAG,gCAAAxB,EAAA,2DACDC,SAAXC,EADY,EACZA,QADY,gCAIKA,EAAOE,UAJZ,OAIZE,EAJY,OAKlB1B,QAAQC,IAAI,6BAA8ByB,EAASxB,UAAUyB,YAC7Db,EAAiBY,EAASxB,UAAUyB,YANlB,2CAAH,qDAoDbQ,EAAc,WAClB,IAAMU,EAAa,IAAIC,aAAWtC,EAASE,GAI3C,OAHiB,IAAIqC,IACnBF,EAAYxB,OAAOC,OAAQZ,IAKzBsC,EAAgB,uCAAG,8BAAA5B,EAAA,sEAEfc,EAAWC,IACXC,EAAU,IAAIC,IAAQhC,EAAKF,EAAW+B,GAC5ClC,QAAQC,IAAI,QAJS,SAKfmC,EAAQE,IAAIW,cAAc,CAC9BT,SAAU,CACR1C,YAAaA,EAAYI,UACzBuC,KAAMP,EAASQ,OAAOxC,UACtBgD,cAAe/D,EAAcgE,WAE/BC,QAAS,CAACtD,KAXS,cAarBE,QAAQC,IAAI,wCAAyCH,EAAYI,UAAUyB,YAbtD,SAcfgB,IAde,yDAiBrB3C,QAAQC,IAAI,sCAAZ,MAjBqB,0DAAH,qDAsBtBoD,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAAlC,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOkC,iBAAiB,OAAQD,GACzB,kBAAMjC,OAAOmC,oBAAoB,OAAQF,MAC/C,IACH,IAAMX,EAAU,uCAAG,gCAAAvB,EAAA,sEAETc,EAAWC,IACXC,EAAU,IAAIC,IAAQhC,EAAKF,EAAW+B,GAC5ClC,QAAQC,IAAImC,EAAQE,KAJL,SAKOF,EAAQqB,QAAQ3D,YAAY4D,MAAM5D,EAAYI,WALrD,OAKTuD,EALS,OAMfzD,QAAQC,IAAI,kBAAmBwD,GAC/BvC,EAAWuC,EAAQxC,SAPJ,kDAUfjB,QAAQC,IAAI,wBAAZ,MACAiB,EAAW,MAXI,0DAAH,qDAsBhB,OAPAmC,qBAAU,WACJxC,IACFb,QAAQC,IAAI,wBACZ0C,OAED,CAAC9B,IAGA,qBAAK8C,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,yCACA,mBAAGA,UAAU,WAAb,+DAGE9C,GA7GR,wBACI8C,UAAU,mCACVC,QAAShB,EAFb,+BA+GO/B,IAvGO,OAAZI,EAEA,qBAAK0C,UAAU,sBAAf,SACE,wBAAQA,UAAU,+BAA+BC,QAASZ,EAA1D,kEAOJ,sBAAKW,UAAU,sBAAf,UACE,wCAAW9C,KAEX,uBACIgD,SAAU/B,EADd,UAGE,uBACIgC,KAAK,OACLC,YAAY,kBACZC,MAAOjD,EACPkD,SAAU,SAAClC,GAAD,OAAOf,EAAce,EAAEmC,OAAOF,UAE5C,wBAAQF,KAAK,SAASH,UAAU,+BAAhC,uBAEF,qBAAKA,UAAU,WAAf,SACG1C,EAAQkD,KAAI,SAACC,GAAD,OACT,qBAAKT,UAAU,WAAf,SACE,qBAAKU,IAAKD,EAAIE,QAASC,IAAKH,KADCA,EAAII,0BC5HjDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.3291c9e9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor';\r\nimport idl from \"./idl.json\";\r\nimport kp from './keypair.json'\r\n\r\n// Constants\r\nconst { SystemProgram, Keypair } = web3;\r\n\r\n// Create a keypair for the account that will hold the GIF data.\r\nconst arr = Object.values(kp._keypair.secretKey)\r\nconst secret = new Uint8Array(arr)\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\r\nconsole.log(baseAccount.publicKey)\r\n// Get our program's id from the IDL file.\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Set our network to devnet.\r\nconst network = clusterApiUrl('devnet');\r\n\r\n// Controls how we want to acknowledge when a transaction is \"done\".\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\n\r\n\r\nconst App = () => {\r\n  // State\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  // Actions\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          // console.log('Phantom wallet found!');\r\n          const response = await solana.connect({ onlyIfTrusted: true });\r\n          // console.log(\r\n          //     'Connected with Public Key:',\r\n          //     response.publicKey.toString()\r\n          // );\r\n\r\n          /*\r\n           * Set the user's publicKey in state to be used later!\r\n           */\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  const sendGif = async (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.length === 0) {\r\n      console.log(\"No gif link given!\")\r\n      return\r\n    }\r\n    console.log('Gif link:', inputValue);\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        },\r\n      });\r\n      console.log(\"GIF successfully sent to program\", inputValue)\r\n  \r\n      setInputValue('');\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error sending GIF:\", error)\r\n    }\r\n  };\r\n  console.log(walletAddress)\r\n  console.log(gifList)\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log('Connected with Public Key:', response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n  const renderNotConnectedContainer = () => (\r\n      <button\r\n          className=\"cta-button connect-wallet-button\"\r\n          onClick={connectWallet}\r\n      >\r\n        Connect to Wallet\r\n      </button>\r\n  );\r\n  const renderConnectedContainer = () => {\r\n    if (gifList === null) {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\r\n            Do One-Time Initialization For GIF Program Account\r\n          </button>\r\n        </div>\r\n      )\r\n    } else {\r\n      return(\r\n      <div className=\"connected-container\">\r\n        <h3>Hello {walletAddress}</h3>\r\n        {/* Go ahead and add this input and button to start */}\r\n        <form\r\n            onSubmit={sendGif}\r\n        >\r\n          <input\r\n              type=\"text\"\r\n              placeholder=\"Enter gif link!\"\r\n              value={inputValue}\r\n              onChange={(e) => setInputValue(e.target.value)}\r\n          />\r\n          <button type=\"submit\" className=\"cta-button submit-gif-button\">Submit</button>\r\n        </form>\r\n        <div className=\"gif-grid\">\r\n          {gifList.map((gif) => (\r\n              <div className=\"gif-item\" key={gif.giflink}>\r\n                <img src={gif.gifLink} alt={gif} />\r\n              </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      )}\r\n  };\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection, window.solana, opts.preflightCommitment,\r\n    );\r\n    return provider;\r\n  }\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\")\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount]\r\n      });\r\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\r\n      await getGifList();\r\n  \r\n    } catch(error) {\r\n      console.log(\"Error creating BaseAccount account:\", error)\r\n    }\r\n  }\r\n\r\n  // UseEffects\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener('load', onLoad);\r\n    return () => window.removeEventListener('load', onLoad);\r\n  }, []);\r\n  const getGifList = async() => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(program.rpc)\r\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\r\n      console.log(\"Got the account\", account)\r\n      setGifList(account.gifList)\r\n  \r\n    } catch (error) {\r\n      console.log(\"Error in getGifList: \", error)\r\n      setGifList(null);\r\n    }\r\n  }\r\n  \r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log('Fetching GIF list...');\r\n      getGifList()\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <div className=\"header-container\">\r\n            <p className=\"header\">ðŸ–¼ JDM GIF Portal</p>\r\n            <p className=\"sub-text\">\r\n              View your GIF collection in the metaverse âœ¨\r\n            </p>\r\n            {!walletAddress && renderNotConnectedContainer()}\r\n            {/* We just need to add the inverse here! */}\r\n            {walletAddress && renderConnectedContainer()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}